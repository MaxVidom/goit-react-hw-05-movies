{"version":3,"file":"static/js/544.3aa6ff5e.chunk.js","mappings":"sSAAMA,EAAW,+BACXC,EAAM,4CAAZ,SAEeC,EAAS,GAATA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAwBC,GAAxB,uFACsBC,MAAMD,GAD5B,cACUE,EADV,yBAEaA,EAAIC,GAAMD,EAAIE,OAASC,QAAQC,OAAO,IAAIC,MAAM,eAF7D,kEAKO,SAASC,IACb,OAAOT,EAAS,GAAD,OAAIF,EAAJ,8BAAkCC,IAG7C,SAASW,EAAWC,GACxB,OAAOX,EAAS,GAAD,OAAIF,EAAJ,wBAA4BC,EAA5B,yBAAgDY,IAG3D,SAASC,EAAkBC,GAC/B,OAAOb,EAAS,GAAD,OAAIF,EAAJ,kBAAsBe,GAAtB,OAAgCd,IAG3C,SAASe,EAAgBD,GAC7B,OAAOb,EAAS,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,mBAAwCd,IAGnD,SAASgB,EAAkBF,GAC/B,OAAOb,EAAS,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,mBAAwCd,M,kHCrB3C,SAASiB,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQN,GAAYO,EAAAA,EAAAA,MAAZP,QACR,GAA0BI,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAOA,OANAC,EAAAA,EAAAA,YAAU,WACRvB,EAAAA,GACmBa,GAChBW,MAAK,SAAAC,GAAS,OAAIN,EAASM,EAAUC,SACrCC,OAAM,SAAAN,GAAK,OAAIC,EAASD,EAAMO,cAChC,CAACf,KAEF,0BACGQ,IAAS,wBAAKA,EAAMO,UACpBV,GACCA,EAAMW,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,cAAeC,EAAS,EAATA,GACnD,OACE,0BACGH,IACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAKH,EACLI,MAAM,SAGV,mCAAWJ,MACX,uCAAeD,OATRE","sources":["api/fetch.js","components/Cast/Cast.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '?api_key=5c9ace2476c46656758ceca732bea2c0';\n\nasync function fetchApi(url) {\n    const res = await fetch(url);\n      return res.ok ?  res.json() : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendFilms() {\n   return fetchApi(`${BASE_URL}/trending/movie/day${KEY}`)\n}\n\nexport function fetchMovie(movieName) {\n   return fetchApi(`${BASE_URL}/search/movie${KEY}&page=1&query=${movieName}`)\n}\n\nexport function fetchMovieDetails(movieId) {\n   return fetchApi(`${BASE_URL}/movie/${movieId}${KEY}`)\n}\n\nexport function fetchMovieCasts(movieId) {\n   return fetchApi(`${BASE_URL}/movie/${movieId}/credits${KEY}`)\n}\n\nexport function fetchMovieReviews(movieId) {\n   return fetchApi(`${BASE_URL}/movie/${movieId}/reviews${KEY}`)\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as fetchApi from '../../api/fetch';\n\nexport default function Cast() {\n  const [casts, setCasts] = useState([]);\n  const { movieId } = useParams();\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchApi\n      .fetchMovieCasts(movieId)\n      .then(filmCasts => setCasts(filmCasts.cast))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n  return (\n    <ul>\n      {error && <h2>{error.message}</h2>}\n      {casts &&\n        casts.map(({ profile_path, character, original_name, id }) => {\n          return (\n            <li key={id}>\n              {profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  alt={original_name}\n                  width=\"120\"\n                />\n              )}\n              <p>Actor: {original_name}</p>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n"],"names":["BASE_URL","KEY","fetchApi","url","fetch","res","ok","json","Promise","reject","Error","fetchTrendFilms","fetchMovie","movieName","fetchMovieDetails","movieId","fetchMovieCasts","fetchMovieReviews","Cast","useState","casts","setCasts","useParams","error","setError","useEffect","then","filmCasts","cast","catch","message","map","profile_path","character","original_name","id","src","alt","width"],"sourceRoot":""}